unit UThread;

interface

uses
  System.Classes, Winapi.Windows, Winapi.Messages, System.SysUtils,
  System.Variants, Winapi.ShellAPI, Vcl.Dialogs, uMyGrid, Vcl.Controls;

type
  Tword = class(TThread)
  private
    { Private declarations }
    jindu: PLONG64;
    state: Boolean;
  protected
    procedure Execute; override;
  public
    constructor Create(Sender: TObject); override;
    procedure myimgstart;
    property myState: Boolean read state write state;
    property myjindu: PLONG64 read jindu write jindu;
    procedure OnClick(Sender: TObject; Index: UInt64);
  end;

var
  myGrid: TDataGrid;

implementation
//

{
  Important: Methods and properties of objects in visual components can only be
  used in a method called using Synchronize, for example,

      Synchronize(UpdateCaption);

  and UpdateCaption could look like,

    procedure Tword.UpdateCaption;
    begin
      Form1.Caption := 'Updated in a thread';
    end;

    or

    Synchronize(
      procedure
      begin
        Form1.Caption := 'Updated in thread via an anonymous method'
      end
      )
    );

  where an anonymous method is passed.

  Similarly, the developer can call the Queue method with similar parameters as
  above, instead passing another TThread class as the first parameter, putting
  the calling thread in a queue with the other thread.

}

{ Tword }

uses
  uFrmMain, UFrmSTratr, UFrmstrart_end;

constructor Tword.Create(Sender: TObject);
begin
  inherited;
  MyGrid := TDataGrid.Create(nil);
  MyGrid.Align := alClient;
  MyGrid.Parent := FrmSTratr.TabSheet2;
  MyGrid.Width := 4000;
  MyGrid.OnSmallClick := Self.OnClick;
  myGrid.RowCount := 1000;
end;

procedure Tword.Execute;
begin
  { Place thread code here }
  myimgstart();
end;

procedure Tword.myimgstart;


procedure Tword.OnClick(Sender: TObject; Index: UInt64);
begin
  Showmessage('我是第 ' + Index.ToString + ' 个格子');
end;

end.

